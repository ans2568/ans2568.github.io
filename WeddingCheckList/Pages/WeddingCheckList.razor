@page "/"
@using System.Text.Json
@using Microsoft.JSInterop
@inject IJSRuntime JS
@using MudBlazor
<style>
    .mud-popover .mud-list-item {
        background-color: white !important;
    }
</style>

<MudContainer Class="pa-0" Style="max-width:100vw;">
    <MudPaper Class="pa-0" Elevation="3" Style="background: linear-gradient(135deg, #fb6b90 0%, #fb4570 100%); max-width:100vw;">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
            <MudText Typo="Typo.h4" Style="color: black;">
                💍 결혼 준비 체크리스트
            </MudText>
            <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined" Style="color: black; border-color: #fb8da0;">
                총 @Items.Count 개 항목
            </MudChip>
        </MudStack>
    </MudPaper>

    <MudPaper Class="pa-0 mt-4" Elevation="2" Style="max-width:100vw;">
        @if (Items.Count == 0)
        {
            <MudAlert Severity="Severity.Info" Class="mb-4">
                <MudText>아직 등록된 항목이 없습니다. 아래 버튼을 클릭하여 첫 번째 항목을 추가해보세요!</MudText>
            </MudAlert>
        }

        <MudText Typo="Typo.h6" Class="mt-4">📌 본식 전</MudText>
        @RenderCategoryGroup(CategoryPeriod.본식전)
        @if (Items.Count(i => GetCategoryPeriod(i.Category) == CategoryPeriod.본식전) > 0)
        {
            <MudDivider Class="my-4" />
            <MudStack Row="true" Spacing="2" Justify="Justify.SpaceBetween">
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Filled" OnClick="() => AddItem(CategoryPeriod.본식전)" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small">
                        항목 추가
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" OnClick="Save" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small">
                        저장
                    </MudButton>
                </MudStack>
                <MudStack Row="true" Spacing="2">
                    <MudChip T="string" Color="Color.Info" Size="Size.Medium">
                        본식 전 총 금액: @GetTotalAmountByCategoryPeriod(CategoryPeriod.본식전).ToString("N0")원
                    </MudChip>
                    <MudChip T="string" Color="Color.Success" Size="Size.Medium">
                        완료: @GetCompletedCount()개
                    </MudChip>
                </MudStack>
            </MudStack>
        }
        else
        {
            <MudDivider Class="my-4" />
            <MudStack Row="true" Spacing="2" Justify="Justify.Center">
                <MudButton Variant="Variant.Filled" OnClick="() => AddItem(CategoryPeriod.본식전)" Color="Color.Primary" Size="Size.Large">
                    ➕ 첫 번째 항목 추가하기
                </MudButton>
            </MudStack>
        }

        <MudText Typo="Typo.h6" Class="mt-4">👰 본식</MudText>
        @RenderCategoryGroup(CategoryPeriod.본식)
        @if (Items.Count(i => GetCategoryPeriod(i.Category) == CategoryPeriod.본식) > 0)
        {
            <MudDivider Class="my-4" />
            <MudStack Row="true" Spacing="2" Justify="Justify.SpaceBetween">
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Filled" OnClick="() => AddItem(CategoryPeriod.본식)" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small">
                        항목 추가
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" OnClick="Save" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small">
                        저장
                    </MudButton>
                </MudStack>
                <MudStack Row="true" Spacing="2">
                    <MudChip T="string" Color="Color.Info" Size="Size.Medium">
                        본식 총 금액: @GetTotalAmountByCategoryPeriod(CategoryPeriod.본식).ToString("N0")원
                    </MudChip>
                    <MudChip T="string" Color="Color.Success" Size="Size.Medium">
                        완료: @GetCompletedCount()개
                    </MudChip>
                </MudStack>
            </MudStack>
        }
        else
        {
            <MudDivider Class="my-4" />
            <MudStack Row="true" Spacing="2" Justify="Justify.Center">
                <MudButton Variant="Variant.Filled" OnClick="() => AddItem(CategoryPeriod.본식)" Color="Color.Primary" Size="Size.Large">
                    ➕ 첫 번째 항목 추가하기
                </MudButton>
            </MudStack>
        }

        <MudText Typo="Typo.h6" Class="mt-4">🏝️ 본식 후</MudText>
        @RenderCategoryGroup(CategoryPeriod.본식후)
        @if (Items.Count(i => GetCategoryPeriod(i.Category) == CategoryPeriod.본식후) > 0)
        {
            <MudDivider Class="my-4" />
            <MudStack Row="true" Spacing="2" Justify="Justify.SpaceBetween">
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Filled" OnClick="() => AddItem(CategoryPeriod.본식후)" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small">
                        항목 추가
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" OnClick="Save" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small">
                        저장
                    </MudButton>
                </MudStack>
                <MudStack Row="true" Spacing="2">
                    <MudChip T="string" Color="Color.Info" Size="Size.Medium">
                        본식 후 총 금액: @GetTotalAmountByCategoryPeriod(CategoryPeriod.본식후).ToString("N0")원
                    </MudChip>
                    <MudChip T="string" Color="Color.Success" Size="Size.Medium">
                        완료: @GetCompletedCount()개
                    </MudChip>
                </MudStack>
            </MudStack>
        }
        else
        {
            <MudDivider Class="my-4" />
            <MudStack Row="true" Spacing="2" Justify="Justify.Center">
                <MudButton Variant="Variant.Filled" OnClick="() => AddItem(CategoryPeriod.본식후)" Color="Color.Primary" Size="Size.Large">
                    ➕ 첫 번째 항목 추가하기
                </MudButton>
            </MudStack>
        }

        <MudText Typo="Typo.h6" Class="mt-4">📝 기타</MudText>
        @RenderCategoryGroup(CategoryPeriod.기타)
        @if (Items.Count(i => GetCategoryPeriod(i.Category) == CategoryPeriod.기타) > 0)
        {
            <MudDivider Class="my-4" />
            <MudStack Row="true" Spacing="2" Justify="Justify.SpaceBetween">
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Filled" OnClick="() => AddItem(CategoryPeriod.기타)" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small">
                        항목 추가
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" OnClick="Save" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small">
                        저장
                    </MudButton>
                </MudStack>
                <MudStack Row="true" Spacing="2">
                    <MudChip T="string" Color="Color.Info" Size="Size.Medium">
                        본식 후 총 금액: @GetTotalAmountByCategoryPeriod(CategoryPeriod.기타).ToString("N0")원
                    </MudChip>
                    <MudChip T="string" Color="Color.Success" Size="Size.Medium">
                        완료: @GetCompletedCount()개
                    </MudChip>
                </MudStack>
            </MudStack>
        }
        else
        {
            <MudDivider Class="my-4" />
            <MudStack Row="true" Spacing="2" Justify="Justify.Center">
                <MudButton Variant="Variant.Filled" OnClick="() => AddItem(CategoryPeriod.기타)" Color="Color.Primary" Size="Size.Large">
                    ➕ 첫 번째 항목 추가하기
                </MudButton>
            </MudStack>
        }
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="2">
            <MudChip T="string" Color="Color.Success" Size="Size.Large">
                전체 총 금액: @GetTotalAmount().ToString("N0")원
            </MudChip>
            <MudButton OnClick="@ExportToExcel" Color="Color.Primary" Variant="Variant.Filled" Class="me-2" Size="Size.Small">
                <i class="fas fa-file-excel" style="color: green; margin-right: 8px;"></i> Excel로 저장
            </MudButton>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    RenderFragment RenderCategoryGroup(CategoryPeriod period) => @<MudTable Items="@(Items.Where(i => GetCategoryPeriod(i.Category) == period))" Hover="true" Elevation="1" Striped="true" Dense="true" Class="mt-4">
        <HeaderContent>
            <MudTh Style="min-width: 140px;">카테고리</MudTh>
            <MudTh Style="min-width: 120px;">업체명</MudTh>
            <MudTh Style="min-width: 120px;">계약금</MudTh>
            <MudTh Style="min-width: 120px;">잔금</MudTh>
            <MudTh Style="min-width: 120px;">최종 금액</MudTh>
            <MudTh Style="min-width: 100px;">결제자</MudTh>
            <MudTh Style="min-width: 80px;">후기</MudTh>
            <MudTh Style="min-width: 120px;">비고</MudTh>
            <MudTh Style="min-width: 80px;">삭제</MudTh>
        </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudSelect T="CategoryType" @bind-Value="context.Category" Variant="Variant.Outlined" Size="Size.Medium" Style="min-width:140px;">
                @foreach (CategoryType category in Enum.GetValues(typeof(CategoryType)))
                {
                    if (GetCategoryPeriod(category) == GetCategoryPeriod(context.Category))
                    {
                        <MudSelectItem T="CategoryType" Value="@category">@category.ToString()</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="context.Vendor" Variant="Variant.Outlined" Size="Size.Small" Placeholder="업체명" dense="true" />
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="context.DepositString" Variant="Variant.Outlined" Size="Size.Medium" Placeholder="0" Adornment="Adornment.End" AdornmentText="원"
                  InputType="InputType.Text" Class="text-end" OnBlur="@(() => ParseDeposit(context))" Style="min-width:120px;" />
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="context.RemainString" Variant="Variant.Outlined" Size="Size.Medium" Placeholder="0" Adornment="Adornment.End" AdornmentText="원"
                  InputType="InputType.Text" Class="text-end" OnBlur="@(() => ParseRemain(context))" Style="min-width:120px;" />
        </MudTd>
        <MudTd>
            <MudChip T="string" Color="@(GetTotalAmountColor(context.Deposit + context.Remain))" Size="Size.Small">
                @((context.Deposit + context.Remain).ToString("N0"))원
            </MudChip>
        </MudTd>
        <MudTd>
            <MudSelect T="string" @bind-Value="context.PaidBy" Variant="Variant.Outlined" Size="Size.Small" dense="true">
                <MudSelectItem Value="@("신랑")">신랑</MudSelectItem>
                <MudSelectItem Value="@("신부")">신부</MudSelectItem>
            </MudSelect>
        </MudTd>
        <MudTd>
            <MudCheckBox T="bool" @bind-Checked="context.ReviewDone" Color="Color.Success" />
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="context.Memo" Variant="Variant.Outlined" Size="Size.Small" Placeholder="메모" dense="true" />
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => RemoveItem(context))" />
        </MudTd>
    </RowTemplate>
    </MudTable>;
    public enum CategoryPeriod
    {
        본식전,
        본식,
        본식후,
        기타
    }
    public enum CategoryType
    {
        상견례,
        본식,
        본식사례금,
        스튜디오,
        드레스,
        메이크업,
        혼주한복,
        예물,
        예복,
        야외촬영,
        신혼여행,
        DVD,
        기타
    }

    public class ChecklistItem
    {
        public CategoryType Category { get; set; }
        public string Vendor { get; set; } = "";
        public long Deposit { get; set; }
        public long Remain { get; set; }
        public string PaidBy { get; set; } = "신랑";
        public bool ReviewDone { get; set; }
        public string Memo { get; set; } = "";
        public string DepositString
        {
            get => Deposit.ToString("N0");
            set
            {
                if (long.TryParse(value.Replace(",", "").Replace("원", "").Trim(), out var v))
                    Deposit = v;
            }
        }
        public string RemainString
        {
            get => Remain.ToString("N0");
            set
            {
                if (long.TryParse(value.Replace(",", "").Replace("원", "").Trim(), out var v))
                    Remain = v;
            }
        }
    }

    List<ChecklistItem> Items = new List<ChecklistItem>();
    
    public CategoryPeriod GetCategoryPeriod(CategoryType category)
    {
        return category switch
        {
            CategoryType.상견례 => CategoryPeriod.본식전,
            CategoryType.야외촬영 => CategoryPeriod.본식전,
            CategoryType.스튜디오 => CategoryPeriod.본식전,
            CategoryType.드레스 => CategoryPeriod.본식전,
            CategoryType.메이크업 => CategoryPeriod.본식전,
            CategoryType.혼주한복 => CategoryPeriod.본식전,
            CategoryType.예물 => CategoryPeriod.본식전,
            CategoryType.예복 => CategoryPeriod.본식전,
            CategoryType.DVD => CategoryPeriod.본식전,

            CategoryType.본식 => CategoryPeriod.본식,

            CategoryType.본식사례금 => CategoryPeriod.본식후,
            CategoryType.신혼여행 => CategoryPeriod.본식후,

            _ => CategoryPeriod.기타
        };
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var json = await JS.InvokeAsync<string>("localStorage.getItem", "weddingChecklist");
            if (!string.IsNullOrWhiteSpace(json))
            {
                var deserializedItems = JsonSerializer.Deserialize<List<ChecklistItem>>(json);
                if (deserializedItems != null)
                {
                    Items = deserializedItems;
                }
            }
        }
        catch (Exception ex)
        {
            // localStorage 접근 실패 시 빈 리스트로 시작
            Items = new List<ChecklistItem>();
            Console.WriteLine($"localStorage 접근 오류: {ex.Message}");
        }
    }

    // 각 카테고리별 항목 추가
    void AddItem(CategoryPeriod period)
    {
        CategoryType categoryType = period switch
        {
            CategoryPeriod.본식전 => CategoryType.상견례,
            CategoryPeriod.본식 => CategoryType.본식,
            CategoryPeriod.본식후 => CategoryType.신혼여행,
            _ => CategoryType.기타
        };
        Items.Add(new ChecklistItem { Category = categoryType });
    }

    void RemoveItem(ChecklistItem item)
    {
        Items.Remove(item);
    }

    async Task Save()
    {
        try
        {
            var json = JsonSerializer.Serialize(Items);
            await JS.InvokeVoidAsync("localStorage.setItem", "weddingChecklist", json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"저장 오류: {ex.Message}");
        }
    }

    private Color GetTotalAmountColor(long amount)
    {
        return amount switch
        {
            > 10000000 => Color.Error,    // 1000만원 이상
            > 5000000 => Color.Warning,   // 500만원 이상
            > 1000000 => Color.Info,      // 100만원 이상
            _ => Color.Success            // 100만원 미만
        };
    }

    private long GetTotalAmountByCategoryPeriod(CategoryPeriod period)
    {
        return Items
            .Where(item => GetCategoryPeriod(item.Category) == period)
            .Sum(item => item.Deposit + item.Remain);
    }

    private long GetTotalAmount()
    {
        return Items.Sum(item => item.Deposit + item.Remain);
    }

    private int GetCompletedCount()
    {
        return Items.Count(item => item.ReviewDone);
    }

    void ParseDeposit(ChecklistItem item)
    {
        if (long.TryParse(item.DepositString.Replace(",", "").Replace("원", "").Trim(), out var v))
        {
            item.Deposit = v;
        }
        else
        {
            item.Deposit = 0;  // 잘못된 값 처리 (예: 빈 칸을 처리)
        }
    }

    void ParseRemain(ChecklistItem item)
    {
        if (long.TryParse(item.RemainString.Replace(",", "").Replace("원", "").Trim(), out var v))
        {
            item.Remain = v;
        }
        else
        {
            item.Remain = 0;  // 잘못된 값 처리 (예: 빈 칸을 처리)
        }
    }
    async Task ExportToExcel()
{
    var exportList = new List<object>();

    foreach (CategoryPeriod period in Enum.GetValues(typeof(CategoryPeriod)))
    {
        // 그룹 제목 (예: "본식 전")
        exportList.Add(new { 카테고리 = $"[{period}]" });

        // 해당 그룹 항목
        var groupItems = Items
            .Where(i => GetCategoryPeriod(i.Category) == period)
            .ToList();

        foreach (var item in groupItems)
        {
            exportList.Add(new
            {
                카테고리 = item.Category.ToString(),
                업체명 = item.Vendor,
                계약금 = item.Deposit,
                잔금 = item.Remain,
                최종금액 = item.Deposit + item.Remain,
                담당자 = item.PaidBy,
                후기작성 = item.ReviewDone ? "O" : "X",
                비고 = item.Memo
            });
        }

        // 그룹 총합
        long groupTotal = groupItems.Sum(i => i.Deposit + i.Remain);
        exportList.Add(new { 카테고리 = $"[{period} 총합]: {groupTotal:N0}원" });

        // 구분 행 (빈 행)
        exportList.Add(new { 카테고리 = "" });
    }

    // 전체 총합
    long total = Items.Sum(i => i.Deposit + i.Remain);
    exportList.Add(new { 카테고리 = $"[전체 총합]: {total:N0}원" });

    await JS.InvokeVoidAsync("exportToExcel", exportList, "결혼준비체크리스트");
}
}